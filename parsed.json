[
    {
        "result": {
            "struct": "public struct SceneRestorationBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SceneRestorationBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CarouselTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: \"VerticalTabViewStyle\")",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MenuButton<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `Menu` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct HandGestureShortcut : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "HandGestureShortcut",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Settings<Content> : SwiftUI.Scene where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct WindowResizability : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowResizability",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ListValue<Style, SelectionValue> where Style : SwiftUI.ListStyle, SelectionValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ListValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetConfiguration : SwiftUI.ControlWidgetConfiguration {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct WindowLevel : Swift.Sendable, Swift.Hashable {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowLevel",
            "conformances": [
                "Swift.Sendable",
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityActionCategory : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityActionCategory",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ActionSheet {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"use `View.confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.\")",
                "@available(macOS, unavailable)",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.\")",
                "@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: \"use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.\")"
            ]
        },
        "parsed_struct": {
            "name": "ActionSheet",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SensoryFeedback : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SensoryFeedback",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {",
            "availabilities": [
                "@available(iOS, introduced: 15.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationSplitView\")",
                "@available(macOS, introduced: 12.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationSplitView\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationSplitView\")"
            ]
        },
        "parsed_struct": {
            "name": "ColumnNavigationViewStyle",
            "conformances": [
                "SwiftUI.NavigationViewStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _SceneInputs {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_SceneInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct WheelPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 13.0, watchOS 6.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WheelPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct Alert {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"Use View.alert(_:isPresented:presenting:actions:) instead.\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use View.alert(_:isPresented:presenting:actions:) instead.\")",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"Use View.alert(_:isPresented:presenting:actions:) instead.\")",
                "@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: \"Use View.alert(_:isPresented:presenting:actions:) instead.\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"Use View.alert(_:isPresented:presenting:actions:) instead.\")"
            ]
        },
        "parsed_struct": {
            "name": "Alert",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ButtonToggleStyle : SwiftUI.ToggleStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Table<Value, Rows, Columns> : SwiftUICore.View where Value == Rows.TableRowValue, Rows : SwiftUI.TableRowContent, Columns : SwiftUI.TableColumnContent, Rows.TableRowValue == Columns.TableRowValue {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "equals",
                "value": "Rows.TableRowValue"
            },
            {
                "type": "Rows",
                "constraint": "inherits_from",
                "value": "SwiftUI.TableRowContent"
            },
            {
                "type": "Columns",
                "constraint": "inherits_from",
                "value": "SwiftUI.TableColumnContent"
            },
            {
                "type": "Rows.TableRowValue",
                "constraint": "equals",
                "value": "Columns.TableRowValue"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableOutlineGroupContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "Data.Element",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableForEachContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "Data.Element",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultDateProgressLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultLabelStyle : SwiftUI.LabelStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AlternatingRowBackgroundBehavior : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "AlternatingRowBackgroundBehavior",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ScrollTargetBehaviorEnvironmentContext {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ScrollTargetBehaviorEnvironmentContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@dynamicMemberLookup public struct ScrollTargetBehaviorContext {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct DismissAction {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderlessButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 17.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _WidgetInputs {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_WidgetInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct WritingToolsBehavior : Swift.Sendable, Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WritingToolsBehavior",
            "conformances": [
                "Swift.Sendable",
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ScrollableLayoutView<Data, Layout> : SwiftUICore.View where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUICore.View, Data.Index : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "Layout",
                "constraint": "inherits_from",
                "value": "SwiftUI._ScrollableLayout"
            },
            {
                "type": "Data.Element",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Data.Index",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MenuBarExtra<Label, Content> : SwiftUI.Scene where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BalancedNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ColumnsFormStyle : SwiftUI.FormStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct DefaultTextFieldStyle : SwiftUI.TextFieldStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultTextFieldStyle",
            "conformances": [
                "SwiftUI.TextFieldStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct WindowGroup<Content> : SwiftUI.Scene where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct FillShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct DropInfo {",
            "availabilities": [
                "@available(iOS 13.4, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DropInfo",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DropProposal : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 13.4, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DropProposal",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct SequenceGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "First",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            },
            {
                "type": "Second",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DefaultListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct DismissBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DismissBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PreviewModifierContent : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _CommandsInputs {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_CommandsInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _CommandsOutputs {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_CommandsOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct WindowVisibilityToggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultWindowVisibilityToggleLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AlignmentWritingModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SearchScopeActivation {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "SearchScopeActivation",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TabView<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "SelectionValue",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _SymbolEffectsRemovedModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TextInputDictationBehavior : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, visionOS 1.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TextInputDictationBehavior",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct TextInputDictationActivation : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, visionOS 1.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TextInputDictationActivation",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LazyVStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticDisclosureGroupStyle : SwiftUI.DisclosureGroupStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TouchBar<Content> where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TouchBar",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _TouchBarModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SidebarListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SidebarListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct SubscriptionView<PublisherType, Content> : SwiftUICore.View where PublisherType : Combine.Publisher, Content : SwiftUICore.View, PublisherType.Failure == Swift.Never {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "PublisherType",
                "constraint": "inherits_from",
                "value": "Combine.Publisher"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "PublisherType.Failure",
                "constraint": "equals",
                "value": "Swift.Never"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct MenuStyleConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "MenuStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct OpenWindowAction {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ToolbarItemGroup<Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LabeledToolbarItemGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct WorldAlignmentBehavior : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WorldAlignmentBehavior",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _FlipForRTLEffect : SwiftUICore.ViewModifier, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor public struct OpenDocumentAction {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct NewDocumentAction {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TitleBarWindowStyle : SwiftUI.WindowStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TitleBarWindowStyle",
            "conformances": [
                "SwiftUI.WindowStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct TextEditorStyleConfiguration {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TextEditorStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TextEditor : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ToggleStyleConfiguration {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToggleStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ScrollViewRoot<P> : SwiftUICore.View where P : SwiftUI._ScrollableContentProvider {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "P",
                "constraint": "inherits_from",
                "value": "SwiftUI._ScrollableContentProvider"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderedButtonMenuStyle : SwiftUI.MenuStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 11.0, deprecated: 100000.0, message: \"Use .menuStyle(.button) and .buttonStyle(.bordered).\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct OutlineGroup<Data, ID, Parent, Leaf, Subgroup> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "OutlineGroup",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct OutlineSubgroupChildren : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableColumn<RowValue, Sort, Content, Label> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator, Content : SwiftUICore.View, Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "RowValue",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            },
            {
                "type": "Sort",
                "constraint": "inherits_from",
                "value": "Foundation.SortComparator"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _SceneOutputs {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_SceneOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ItemProviderTableRowModifier : SwiftUI._TableRowContentModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct OnInsertTableRowModifier : SwiftUI._TableRowContentModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TextInputAutocapitalization : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TextInputAutocapitalization",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DragGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@propertyWrapper @frozen public struct GestureState<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct GestureStateGesture<Base, State> : SwiftUICore.Gesture where Base : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Base",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Slider<Label, ValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, ValueLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "ValueLabel",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _SymmetricallyScaledText : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TableColumnCustomization<RowValue> : Swift.Equatable, Swift.Sendable, Swift.Codable where RowValue : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TableColumnCustomization",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DefaultWindowToolbarStyle : SwiftUI.WindowToolbarStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultWindowToolbarStyle",
            "conformances": [
                "SwiftUI.WindowToolbarStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ProgressView<Label, CurrentValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "CurrentValueLabel",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct LabeledContent<Label, Content> {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "LabeledContent",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _IndexViewStyleConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_IndexViewStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyWidgetConfiguration : SwiftUI.WidgetConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct EmptyTableRowContent<Value> where Value : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableHeaderRowContent<Value, Content> : SwiftUI.TableRowContent where Value : Swift.Identifiable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct MenuOrder : Swift.Equatable, Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "MenuOrder",
            "conformances": [
                "Swift.Equatable",
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct PlaceholderTextShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _TabViewValue<Style, SelectionValue> where Style : SwiftUI.TabViewStyle, SelectionValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_TabViewValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DisclosureGroupStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DisclosureGroupStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DefaultFocusEvaluationPriority : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultFocusEvaluationPriority",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowInteractionBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowInteractionBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowManagerRole : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "WindowManagerRole",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticLabeledContentStyle : SwiftUI.LabeledContentStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _IndefiniteSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _DiscreteSymbolEffectModifier<T> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier where T : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ConditionalSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct SymbolEffectTransition : SwiftUICore.Transition {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SpatialEventCollection : Swift.Collection {",
            "availabilities": [
                "@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SpatialEventCollection",
            "conformances": [
                "Swift.Collection "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowMenuBarExtraStyle",
            "conformances": [
                "SwiftUI.MenuBarExtraStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LinearProgressViewStyle : SwiftUI.ProgressViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PagingScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PagingScrollTargetBehavior",
            "conformances": [
                "SwiftUI.ScrollTargetBehavior "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ViewAlignedScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ViewAlignedScrollTargetBehavior",
            "conformances": [
                "SwiftUI.ScrollTargetBehavior "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct AnyScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TabCustomizationBehavior : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TabCustomizationBehavior",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GroupElementsOfContent<Subviews, Content> : SwiftUICore.View where Subviews : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Subviews",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SubviewsCollection : Swift.RandomAccessCollection {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SubviewsCollection",
            "conformances": [
                "Swift.RandomAccessCollection "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SubviewsCollectionSlice : Swift.RandomAccessCollection {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SubviewsCollectionSlice",
            "conformances": [
                "Swift.RandomAccessCollection "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _LayoutDirectionBehaviorEffect : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CircularProgressViewStyle : SwiftUI.ProgressViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Toggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TaskModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TaskValueModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct RotationGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: \"RotateGesture\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: \"RotateGesture\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: \"RotateGesture\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct RotateGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TextField<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _IsLinkedGroupTraitKey {",
            "availabilities": [
                "@available(watchOS 6.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_IsLinkedGroupTraitKey",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SpringLoadingBehavior : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SpringLoadingBehavior",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct __DesignTimeSelectionIdentifier : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "__DesignTimeSelectionIdentifier",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct TabBarPlacement : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TabBarPlacement",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct RadioGroupPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "RadioGroupPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct InsetListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "InsetListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LinkButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EditActions<Data> : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "EditActions",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct EditableCollectionContent<Content, Data> {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "EditableCollectionContent",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct IndexedIdentifierCollection<Base, ID> : Swift.Collection where Base : Swift.Collection, ID : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "IndexedIdentifierCollection",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryActionModifier<Value> where Value : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryActionModifier2<Value> where Value : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct FileDocumentWriteConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "FileDocumentWriteConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct FileDocumentReadConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "FileDocumentReadConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ForEachSectionCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ForEachSectionCollection",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct NavigationSplitViewStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationSplitViewStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DefaultWindowStyle : SwiftUI.WindowStyle {",
            "availabilities": [
                "@available(macOS 11.0, visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultWindowStyle",
            "conformances": [
                "SwiftUI.WindowStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AllowsHitTestingModifier : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct LinkShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentShapeKindModifier<ContentShape> : SwiftUICore.ViewModifier where ContentShape : SwiftUICore.Shape {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ContentShape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct NavigationPath {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationPath",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct AnimationCompletionCriteria : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AnimationCompletionCriteria",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollTransitionConfiguration {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollTransitionConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ToolbarItemPlacement {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarItemPlacement",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct PullDownMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PullDownMenuBarExtraStyle",
            "conformances": [
                "SwiftUI.MenuBarExtraStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _SystemShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 13.0, message: \"Use `HierarchicalShapeStyle` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_SystemShapeStyle",
            "conformances": [
                "SwiftUICore.ShapeStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableRow<Value> : SwiftUI.TableRowContent where Value : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _TypeSelectEquivalentTableRowModifier : SwiftUI._TableRowContentModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _HoverRegionModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.4, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct List<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "SelectionValue",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceActionModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey, Key.Value : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            },
            {
                "type": "Key.Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ToolbarItem<ID, Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct GroupedListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 13.0, tvOS 13.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "GroupedListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowLayoutRoot {",
            "availabilities": [
                "@available(macOS 15.0, visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowLayoutRoot",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct FileDialogBrowserOptions : Swift.OptionSet {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "FileDialogBrowserOptions",
            "conformances": [
                "Swift.OptionSet "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct SceneStorage<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Menu<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct InlinePickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "InlinePickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _WidgetOutputs {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_WidgetOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _HoverTableRowModifier : SwiftUI._TableRowContentModifier {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct DigitalCrownEvent : Swift.Sendable {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DigitalCrownEvent",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PaletteControlGroupStyle : SwiftUI.ControlGroupStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _CALayerView<LayerType> : SwiftUICore.View where LayerType : QuartzCore.CALayer {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "LayerType",
                "constraint": "inherits_from",
                "value": "QuartzCore.CALayer"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct AppStorage<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _NavigationDestinationCollection {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_NavigationDestinationCollection",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SidebarAdaptableTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ReferenceFileDocumentConfiguration<Document> where Document : SwiftUI.ReferenceFileDocument {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Document",
                "constraint": "inherits_from",
                "value": "SwiftUI.ReferenceFileDocument"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct RoundedBorderTextFieldStyle : SwiftUI.TextFieldStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "RoundedBorderTextFieldStyle",
            "conformances": [
                "SwiftUI.TextFieldStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct NavigationBarItem : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationBarItem",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _SceneModifier_Content<Modifier> : SwiftUI.Scene where Modifier : SwiftUI._SceneModifier {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Modifier",
                "constraint": "inherits_from",
                "value": "SwiftUI._SceneModifier"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ScenePadding : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScenePadding",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor public struct OpenImmersiveSpaceAction : Swift.Sendable {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TableColumnCustomizationBehavior : Swift.SetAlgebra, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TableColumnCustomizationBehavior",
            "conformances": [
                "Swift.SetAlgebra",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor @propertyWrapper public struct UIApplicationDelegateAdaptor<DelegateType> : SwiftUICore.DynamicProperty where DelegateType : ObjectiveC.NSObject, DelegateType : UIKit.UIApplicationDelegate {",
            "availabilities": [
                "@available(iOS 14.0, tvOS 14.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "DelegateType",
                "constraint": "inherits_from",
                "value": "ObjectiveC.NSObject"
            },
            {
                "type": "DelegateType",
                "constraint": "inherits_from",
                "value": "UIKit.UIApplicationDelegate"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ContextMenuTableRowModifier<MenuItems> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "MenuItems",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ContextMenuPreviewTableRowModifier<MenuItems, Preview> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View, Preview : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "MenuItems",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Preview",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _AccessibilityRotorEntryInputs {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_AccessibilityRotorEntryInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _AccessibilityRotorEntryOutputs {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_AccessibilityRotorEntryOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct AccessibilityRotorContentBuilder {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PresentationMode {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"Use EnvironmentValues.isPresented or EnvironmentValues.dismiss\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use EnvironmentValues.isPresented or EnvironmentValues.dismiss\")",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"Use EnvironmentValues.isPresented or EnvironmentValues.dismiss\")",
                "@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: \"Use EnvironmentValues.isPresented or EnvironmentValues.dismiss\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"Use EnvironmentValues.isPresented or EnvironmentValues.dismiss\")"
            ]
        },
        "parsed_struct": {
            "name": "PresentationMode",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct PrimitiveButtonStyleConfiguration {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PrimitiveButtonStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticControlGroupStyle : SwiftUI.ControlGroupStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultGroupBoxStyle : SwiftUI.GroupBoxStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct FocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PositionLayout {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticTextEditorStyle : SwiftUI.TextEditorStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AnimationTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AnimationTimelineSchedule",
            "conformances": [
                "SwiftUICore.TimelineSchedule",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PlainButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SubmitLabel : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SubmitLabel",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _NavigationTransitionInputs : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_NavigationTransitionInputs",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _NavigationTransitionOutputs : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_NavigationTransitionOutputs",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AutomaticNavigationTransition : SwiftUI.NavigationTransition {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AutomaticNavigationTransition",
            "conformances": [
                "SwiftUI.NavigationTransition "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ZoomNavigationTransition : SwiftUI.NavigationTransition {",
            "availabilities": [
                "@available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ZoomNavigationTransition",
            "conformances": [
                "SwiftUI.NavigationTransition "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Divider : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ButtonMenuStyle : SwiftUI.MenuStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ToolbarCustomizationBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarCustomizationBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor public struct PushWindowAction {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SceneLaunchBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SceneLaunchBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TextFieldLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct WindowIdealSize : Swift.Sendable {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowIdealSize",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PencilHoverPose : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 17.5, macOS 14.5, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PencilHoverPose",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct LimitedAvailabilityConfiguration : SwiftUI.WidgetConfiguration {",
            "availabilities": [
                "@available(iOS 16.1, macOS 13.0, watchOS 9.1, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct RefreshAction : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "RefreshAction",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct ImmersiveSpaceContentBuilder {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ProminentDetailNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SearchFieldPlacement : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SearchFieldPlacement",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _ProjectionEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SettingsLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultSettingsLinkLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _TransformEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct HoverEffect {",
            "availabilities": [
                "@available(iOS 13.4, tvOS 16.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "HoverEffect",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryBarButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryBarActionButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ButtonRole : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ButtonRole",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ToolbarInputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ToolbarInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _ToolbarOutputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ToolbarOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _ToolbarItemList {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ToolbarItemList",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct ToolbarContentBuilder {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct HiddenTitleBarWindowStyle : SwiftUI.WindowStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "HiddenTitleBarWindowStyle",
            "conformances": [
                "SwiftUI.WindowStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct IconOnlyLabelStyle : SwiftUI.LabelStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _NavigationViewStyleConfiguration {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_NavigationViewStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityTechnologies : Swift.SetAlgebra, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityTechnologies",
            "conformances": [
                "Swift.SetAlgebra",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MagnificationGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: \"MagnifyGesture\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: \"MagnifyGesture\")",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: \"MagnifyGesture\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MagnifyGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ContextMenu<MenuItems> where MenuItems : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"Use `contextMenu(menuItems:)` instead.\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `contextMenu(menuItems:)` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, introduced: 6.0, deprecated: 7.0)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"Use `contextMenu(menuItems:)` instead.\")"
            ]
        },
        "parsed_struct": {
            "name": "ContextMenu",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct WindowToolbarFullScreenVisibility : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "WindowToolbarFullScreenVisibility",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NewDocumentButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ContainerValues {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ContainerValues",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SubmitTriggers : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SubmitTriggers",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct InsetGroupedListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 14.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "InsetGroupedListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _PlatformViewRepresentableLayoutOptions : Swift.OptionSet {",
            "availabilities": [
                "@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)"
            ]
        },
        "parsed_struct": {
            "name": "_PlatformViewRepresentableLayoutOptions",
            "conformances": [
                "Swift.OptionSet "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct OrnamentAttachmentAnchor : Swift.Sendable {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "OrnamentAttachmentAnchor",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _TabContentBodyAdaptor<C> : SwiftUICore.View where C : SwiftUI.TabContent {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "C",
                "constraint": "inherits_from",
                "value": "SwiftUI.TabContent"
            }
        ]
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct TabContentBuilder<TabValue> where TabValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "TabValue",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ScrollContentOffsetAdjustmentBehavior {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollContentOffsetAdjustmentBehavior",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PageTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PaletteSelectionEffect : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PaletteSelectionEffect",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ContentMarginPlacement {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ContentMarginPlacement",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularCapacityGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ButtonStyleConfiguration {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ButtonStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CircularGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(watchOS 7.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _TextFieldStyleLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct UIHostingConfiguration<Content, Background> : UIKit.UIContentConfiguration where Content : SwiftUICore.View, Background : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, tvOS 16.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UIHostingConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _UIHostingConfigurationBackgroundView<Style> : SwiftUICore.View where Style : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 16.0, tvOS 16.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SharePreview<Image, Icon> where Image : CoreTransferable.Transferable, Icon : CoreTransferable.Transferable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SharePreview",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorWritingModifier<AnchorValue, Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DefaultPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor public struct DismissImmersiveSpaceAction {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PresentationSizingRoot {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationSizingRoot",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct PresentationSizingContext {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationSizingContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct FormPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "FormPresentationSizing",
            "conformances": [
                "SwiftUI.PresentationSizing",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PagePresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PagePresentationSizing",
            "conformances": [
                "SwiftUI.PresentationSizing",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct FittedPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "FittedPresentationSizing",
            "conformances": [
                "SwiftUI.PresentationSizing",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AutomaticPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AutomaticPresentationSizing",
            "conformances": [
                "SwiftUI.PresentationSizing",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct UIViewControllerRepresentableContext<Representable> where Representable : SwiftUI.UIViewControllerRepresentable {",
            "availabilities": [
                "@available(iOS 13.0, tvOS 13.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Representable",
                "constraint": "inherits_from",
                "value": "SwiftUI.UIViewControllerRepresentable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct Section<Parent, Content, Footer> {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "Section",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct AutomaticHoverEffect : SwiftUICore.CustomHoverEffect {",
            "availabilities": [
                "@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "AutomaticHoverEffect",
            "conformances": [
                "SwiftUICore.CustomHoverEffect "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct HighlightHoverEffect : SwiftUICore.CustomHoverEffect {",
            "availabilities": [
                "@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "HighlightHoverEffect",
            "conformances": [
                "SwiftUICore.CustomHoverEffect "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct LiftHoverEffect : SwiftUICore.CustomHoverEffect {",
            "availabilities": [
                "@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "LiftHoverEffect",
            "conformances": [
                "SwiftUICore.CustomHoverEffect "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NavigationLink<Label, Destination> : SwiftUICore.View where Label : SwiftUICore.View, Destination : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Destination",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct ViewThatFits<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _SizeFittingRoot : SwiftUICore._VariadicView.UnaryViewRoot {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ScrollViewConfig {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ScrollViewConfig",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ScrollView<Provider> : SwiftUICore.View where Provider : SwiftUI._ScrollableContentProvider {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Provider",
                "constraint": "inherits_from",
                "value": "SwiftUI._ScrollableContentProvider"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _AligningContentProvider<Content> : SwiftUI._ScrollableContentProvider where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_AligningContentProvider",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Link<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _PagingViewConfig : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_PagingViewConfig",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _PagingView<Views> : SwiftUICore.View where Views : Swift.RandomAccessCollection, Views.Element : SwiftUICore.View, Views.Index : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Views",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "Views.Element",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Views.Index",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PlainListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PlainListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ProgressViewStyleConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ProgressViewStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct PreviewDevice : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PreviewDevice",
            "conformances": [
                "Swift.RawRepresentable",
                "Swift.ExpressibleByStringLiteral",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct InterfaceOrientation : Swift.CaseIterable, Swift.Identifiable, Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "InterfaceOrientation",
            "conformances": [
                "Swift.CaseIterable",
                "Swift.Identifiable",
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _Preview {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_Preview",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ScrollAnchorRole : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollAnchorRole",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollIndicatorVisibility {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollIndicatorVisibility",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ScrollInputBehavior : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollInputBehavior",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollInputKind : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollInputKind",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollDismissesKeyboardMode : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollDismissesKeyboardMode",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollBounceBehavior : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollBounceBehavior",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TableColumnForEach<Data, ID, RowValue, Sort, Content> : SwiftUI.TableColumnContent where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowValue == Content.TableRowValue, Sort == Content.TableColumnSortComparator, Content : SwiftUI.TableColumnContent {",
            "availabilities": [
                "@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "ID",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "RowValue",
                "constraint": "equals",
                "value": "Content.TableRowValue"
            },
            {
                "type": "Sort",
                "constraint": "equals",
                "value": "Content.TableColumnSortComparator"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUI.TableColumnContent"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AccessibilityDirectTouchOptions : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityDirectTouchOptions",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ListItemTint : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ListItemTint",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AnyTabContent<SelectionValue> : SwiftUI.TabContent where SelectionValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "SelectionValue",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CheckboxToggleStyle : SwiftUI.ToggleStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct RoundedBorderTextEditorStyle : SwiftUI.TextEditorStyle {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ContainerBackgroundPlacement : Swift.Sendable, Swift.Hashable {",
            "availabilities": [
                "@available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ContainerBackgroundPlacement",
            "conformances": [
                "Swift.Sendable",
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GroupBox<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct InsetTableStyle : SwiftUI.TableStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ImmersiveSpaceViewContent<Content> : SwiftUI.ImmersiveSpaceContent where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ForEachSubviewCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ForEachSubviewCollection",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _PickerValue<Style, SelectionValue> where Style : SwiftUI.PickerStyle, SelectionValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_PickerValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SegmentedPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SegmentedPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LinearCapacityGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AlertScene<Actions, Message> : SwiftUI.Scene where Actions : SwiftUICore.View, Message : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Actions",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Message",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TabBarOnlyTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct __UniversalListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "__UniversalListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ListSectionSpacing : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, watchOS 10.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ListSectionSpacing",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct ControlWidgetConfigurationBuilder {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct WindowPlacement : Swift.Equatable {",
            "availabilities": [
                "@available(macOS 15.0, visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowPlacement",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowPlacementContext {",
            "availabilities": [
                "@available(macOS 15.0, visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowPlacementContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct DisplayProxy : Swift.Equatable {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DisplayProxy",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowProxy {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Form<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct EmptyCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ResolvedCommands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_ResolvedCommands",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct CommandsBuilder {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MultiDatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PencilDoubleTapGestureValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 17.5, macOS 14.5, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PencilDoubleTapGestureValue",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PencilSqueezeGestureValue : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 17.5, macOS 14.5, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PencilSqueezeGestureValue",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollPhaseChangeContext {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollPhaseChangeContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct TabRole : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TabRole",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ToolbarCustomizationOptions : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarCustomizationOptions",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct MenuActionDismissBehavior : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "MenuActionDismissBehavior",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct HSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct VSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _SplitViewContainer : SwiftUICore._VariadicView.UnaryViewRoot {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `BorderedButtonMenuStyle` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PullDownMenuButtonStyle",
            "conformances": [
                "SwiftUI.MenuButtonStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct BorderlessPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `BorderlessButtonMenuStyle` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "BorderlessPullDownMenuButtonStyle",
            "conformances": [
                "SwiftUI.MenuButtonStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct BorderlessButtonMenuButtonStyle : SwiftUI.MenuButtonStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `BorderlessButtonMenuStyle` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "BorderlessButtonMenuButtonStyle",
            "conformances": [
                "SwiftUI.MenuButtonStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _TexturedPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `TexturedButtonMenuStyle` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_TexturedPullDownMenuButtonStyle",
            "conformances": [
                "SwiftUI.MenuButtonStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TextEditingCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TextFormattingCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TableColumnAlignment : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TableColumnAlignment",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DisclosureGroup<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PlainWindowStyle : SwiftUI.WindowStyle {",
            "availabilities": [
                "@available(macOS 15.0, visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PlainWindowStyle",
            "conformances": [
                "SwiftUI.WindowStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Picker<Label, SelectionValue, Content> : SwiftUICore.View where Label : SwiftUICore.View, SelectionValue : Swift.Hashable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "SelectionValue",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PalettePickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PalettePickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct Tab<Value, Content, Label> {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "Tab",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LazyHStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AsyncImage<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct DismissSearchAction {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _PullDownButton<Label, Content> where Label : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SelectionShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SelectionShapeStyle",
            "conformances": [
                "SwiftUICore.ShapeStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct DefaultMenuButtonStyle : SwiftUI.MenuButtonStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `menuStyle(.automatic)` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DefaultMenuButtonStyle",
            "conformances": [
                "SwiftUI.MenuButtonStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TitleAndIconLabelStyle : SwiftUI.LabelStyle {",
            "availabilities": [
                "@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct UtilityWindow<Content> : SwiftUI.Scene where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ResolvedMatchedTransitionSourceConfiguration : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ResolvedMatchedTransitionSourceConfiguration",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct EmptyMatchedTransitionSourceConfiguration : SwiftUI.MatchedTransitionSourceConfiguration {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "EmptyMatchedTransitionSourceConfiguration",
            "conformances": [
                "SwiftUI.MatchedTransitionSourceConfiguration "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityRotorEntry<ID> where ID : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityRotorEntry",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NavigationStack<Data, Root> : SwiftUICore.View where Root : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Root",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GroupedFormStyle : SwiftUI.FormStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ButtonBorderShape : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ButtonBorderShape",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessibilityAttachmentModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct DefaultNavigationViewStyle : SwiftUI.NavigationViewStyle {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationSplitView instead\")",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")",
                "@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")"
            ]
        },
        "parsed_struct": {
            "name": "DefaultNavigationViewStyle",
            "conformances": [
                "SwiftUI.NavigationViewStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct Viewpoint3D : Swift.Equatable, Swift.Sendable, Swift.CustomDebugStringConvertible {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "Viewpoint3D",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable",
                "Swift.CustomDebugStringConvertible "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _CoordinateSpaceModifier<Name> : SwiftUICore.ViewModifier, Swift.Equatable where Name : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Name",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ControlGroup<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LabeledControlGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DocumentConfiguration {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DocumentConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PresentedWindowContent<Data, Content> : SwiftUICore.View where Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Decodable"
            },
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Encodable"
            },
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultMenuStyle : SwiftUI.MenuStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AccessibilitySystemRotor : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilitySystemRotor",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct FormStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "FormStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _TableColumnInputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_TableColumnInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _TableColumnOutputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_TableColumnOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct TableColumnBuilder<RowValue, Sort> where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "RowValue",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            },
            {
                "type": "Sort",
                "constraint": "inherits_from",
                "value": "Foundation.SortComparator"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct TabSection<Header, Content, Footer, SelectionValue> {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TabSection",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultTabLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EllipticalListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(watchOS 7.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "EllipticalListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NavigationControlGroupStyle : SwiftUI.ControlGroupStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct VerticalPageTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(watchOS 10.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ToolbarCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SidebarCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct InspectorCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ImportFromDevicesCommands : SwiftUI.Commands {",
            "availabilities": [
                "@available(macOS 12.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EquatableView<Content> : SwiftUICore.View where Content : Swift.Equatable, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct VolumeViewpointUpdateStrategy : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "VolumeViewpointUpdateStrategy",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AutomaticMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "AutomaticMenuBarExtraStyle",
            "conformances": [
                "SwiftUI.MenuBarExtraStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultProgressViewStyle : SwiftUI.ProgressViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _MenuBarExtraValue<Style> where Style : SwiftUI.MenuBarExtraStyle {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_MenuBarExtraValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CommandMenu<Content> : SwiftUI.Commands where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AccessibilityIgnoresInvertColorsViewModifier {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SecureField<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderlessButtonMenuStyle : SwiftUI.MenuStyle {",
            "availabilities": [
                "@available(iOS, introduced: 14.0, deprecated: 100000.0, message: \"Use .menuStyle(.button) and .buttonStyle(.borderless).\")",
                "@available(macOS, introduced: 11.0, deprecated: 100000.0, message: \"Use .menuStyle(.button) and .buttonStyle(.borderless).\")",
                "@available(tvOS, introduced: 17.0, deprecated: 100000.0, message: \"Use .menuStyle(.button) and .buttonStyle(.borderless).\")",
                "@available(watchOS, unavailable)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"Use .menuStyle(.button) and .buttonStyle(.borderless).\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct ControlWidgetTemplateBuilder {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct DialogSeverity : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "DialogSeverity",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MenuControlGroupStyle : SwiftUI.ControlGroupStyle {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CompactMenuControlGroupStyle : SwiftUI.ControlGroupStyle {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollViewBoundsModifier<Result> : SwiftUICore.ViewModifier where Result : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)",
                "@available(*, deprecated, message: \"Use visualEffect, scrollTransition, or onGeometryChange instead\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ViewModifier"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollViewBoundsModifier2<Result> : SwiftUICore.ViewModifier where Result : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)",
                "@available(*, deprecated, message: \"Use visualEffect, scrollTransition, or onGeometryChange instead\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ViewModifier"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PlainTextFieldStyle : SwiftUI.TextFieldStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PlainTextFieldStyle",
            "conformances": [
                "SwiftUI.TextFieldStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ToolbarDefaultItemKind {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarDefaultItemKind",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderedButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct SceneBuilder {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PlainTextEditorStyle : SwiftUI.TextEditorStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct WheelDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(iOS 13.0, watchOS 10.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LongPressGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ContentUnavailableView<Label, Description, Actions> : SwiftUICore.View where Label : SwiftUICore.View, Description : SwiftUICore.View, Actions : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Description",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Actions",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SearchUnavailableContent {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SearchUnavailableContent",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct OpenSettingsAction {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DefaultFocusModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _FocusSystem {",
            "availabilities": [
                "@available(macOS 11.0, watchOS 7.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_FocusSystem",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ResetFocusAction {",
            "availabilities": [
                "@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)",
                "@available(iOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ResetFocusAction",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ControlWidgetAdaptor<Base> : SwiftUI.Widget where Base : SwiftUI.ControlWidget {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Base",
                "constraint": "inherits_from",
                "value": "SwiftUI.ControlWidget"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ModifiersGesture<Content> : SwiftUICore.Gesture where Content : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CardButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(tvOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DigitalCrownModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(watchOS 6.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct FileDocumentConfiguration<Document> where Document : SwiftUI.FileDocument {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "FileDocumentConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct Grid<Content> where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct GridRow<Content> where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GridCellSizeModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GridAnchorModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GridAlignmentModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GridUnsizedAxesModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct GridLayout : SwiftUICore._VariadicView.UnaryViewRoot {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _EventDirections : Swift.OptionSet {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_EventDirections",
            "conformances": [
                "Swift.OptionSet "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct BackgroundTask<Request, Response> : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "BackgroundTask",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct NSHostingSceneBridgingOptions : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "NSHostingSceneBridgingOptions",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PencilPreferredAction : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 17.5, macOS 14.5, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PencilPreferredAction",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct DoubleColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationSplitView instead\")",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")",
                "@available(watchOS, unavailable)",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"replace styled NavigationView with NavigationStack or NavigationSplitView instead\")"
            ]
        },
        "parsed_struct": {
            "name": "DoubleColumnNavigationViewStyle",
            "conformances": [
                "SwiftUI.NavigationViewStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct HelpLink : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 14.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ShareLink<Data, PreviewImage, PreviewIcon, Label> : SwiftUICore.View where Data : Swift.RandomAccessCollection, PreviewImage : CoreTransferable.Transferable, PreviewIcon : CoreTransferable.Transferable, Label : SwiftUICore.View, Data.Element : CoreTransferable.Transferable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.RandomAccessCollection"
            },
            {
                "type": "PreviewImage",
                "constraint": "inherits_from",
                "value": "CoreTransferable.Transferable"
            },
            {
                "type": "PreviewIcon",
                "constraint": "inherits_from",
                "value": "CoreTransferable.Transferable"
            },
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Data.Element",
                "constraint": "inherits_from",
                "value": "CoreTransferable.Transferable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultShareLinkLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ImmersiveSpace<Content, Data> : SwiftUI.Scene where Content : SwiftUI.ImmersiveSpaceContent, Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable {",
            "availabilities": [
                "@available(visionOS 1.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUI.ImmersiveSpaceContent"
            },
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Decodable"
            },
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Encodable"
            },
            {
                "type": "Data",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct StepperFieldDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct FieldDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GraphicalDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticTableStyle : SwiftUI.TableStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearCapacityGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultToggleStyle : SwiftUI.ToggleStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct CarouselListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(watchOS 6.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "CarouselListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _Previewable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_Previewable",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorTransformModifier<AnchorValue, Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct BorderedListStyle : SwiftUI.ListStyle {",
            "availabilities": [
                "@available(macOS 12.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "BorderedListStyle",
            "conformances": [
                "SwiftUI.ListStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentShapeModifier<ContentShape> : SwiftUICore.ViewModifier where ContentShape : SwiftUICore.Shape {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ContentShape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _TableRowInputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_TableRowInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _TableRowOutputs {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_TableRowOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct TableRowBuilder<Value> where Value : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _IdentifiedViewsKey {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_IdentifiedViewsKey",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _IdentifiedModifier<Identifier> : SwiftUICore.ViewModifier, Swift.Equatable where Identifier : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Identifier",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ToolbarTitleMenu<Content> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct ScrollViewReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ScrollViewProxy {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollViewProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct NavigationLinkPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationLinkPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _AccessibilityQuickActionStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_AccessibilityQuickActionStyle",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityQuickActionPromptStyle : SwiftUI.AccessibilityQuickActionStyle {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityQuickActionPromptStyle",
            "conformances": [
                "SwiftUI.AccessibilityQuickActionStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityQuickActionOutlineStyle : SwiftUI.AccessibilityQuickActionStyle {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityQuickActionOutlineStyle",
            "conformances": [
                "SwiftUI.AccessibilityQuickActionStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct KeyPress : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "KeyPress",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Gauge<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View, BoundsLabel : SwiftUICore.View, MarkedValueLabels : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "CurrentValueLabel",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "BoundsLabel",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "MarkedValueLabels",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct UnifiedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UnifiedWindowToolbarStyle",
            "conformances": [
                "SwiftUI.WindowToolbarStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SnapshotResponse : Swift.Sendable {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SnapshotResponse",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SnapshotData : Swift.Sendable {",
            "availabilities": [
                "@available(watchOS 9.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SnapshotData",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _HiddenModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DatePickerComponents : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DatePickerComponents",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SearchPresentationToolbarBehavior {",
            "availabilities": [
                "@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)"
            ]
        },
        "parsed_struct": {
            "name": "SearchPresentationToolbarBehavior",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CompactDatePickerStyle : SwiftUI.DatePickerStyle {",
            "availabilities": [
                "@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _OverlayLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TextSelection : Swift.Equatable, Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TextSelection",
            "conformances": [
                "Swift.Equatable",
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct TupleTableColumnContent<RowValue, Sort, T> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "RowValue",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            },
            {
                "type": "Sort",
                "constraint": "inherits_from",
                "value": "Foundation.SortComparator"
            }
        ]
    },
    {
        "result": {
            "struct": "@propertyWrapper public struct FocusedValue<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@propertyWrapper public struct FocusedBinding<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct FocusedValues {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "FocusedValues",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Subview : SwiftUICore.View, Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GroupedTabViewStyle : SwiftUI.TabViewStyle {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TableStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TableStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct GaugeStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "GaugeStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Stepper<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ShadowView<Content> : SwiftUICore.View where Content : SwiftUICore.Shape {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct FetchedResults<Result> : Swift.RandomAccessCollection where Result : CoreData.NSFetchRequestResult {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "CoreData.NSFetchRequestResult"
            }
        ]
    },
    {
        "result": {
            "struct": "@propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FetchRequest<Result> where Result : CoreData.NSFetchRequestResult {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "CoreData.NSFetchRequestResult"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct TabViewCustomization : Swift.Equatable, Swift.Sendable, Swift.Codable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "TabViewCustomization",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable",
                "Swift.Codable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ToolbarTitleDisplayMode {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarTitleDisplayMode",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ControlGroupStyleConfiguration {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ControlGroupStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetTemplate {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct KeyboardShortcut : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "KeyboardShortcut",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct KeyEquivalent : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "KeyEquivalent",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NavigationSplitView<Sidebar, Content, Detail> : SwiftUICore.View where Sidebar : SwiftUICore.View, Content : SwiftUICore.View, Detail : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Sidebar",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Detail",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct NavigationSplitViewVisibility : Swift.Equatable, Swift.Codable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationSplitViewVisibility",
            "conformances": [
                "Swift.Equatable",
                "Swift.Codable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct HoverEffectGroup : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "HoverEffectGroup",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct EditButton : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _IgnoredByLayoutEffect<Base> : SwiftUICore.GeometryEffect where Base : SwiftUICore.GeometryEffect {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Base",
                "constraint": "inherits_from",
                "value": "SwiftUICore.GeometryEffect"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LinearGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(watchOS 7.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _EmptyScene : SwiftUI.Scene {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct CommandGroup<Content> : SwiftUI.Commands where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct CommandGroupPlacement {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "CommandGroupPlacement",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SquareBorderTextFieldStyle : SwiftUI.TextFieldStyle {",
            "availabilities": [
                "@available(macOS 10.15, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "SquareBorderTextFieldStyle",
            "conformances": [
                "SwiftUI.TextFieldStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct NavigationView<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"use NavigationStack or NavigationSplitView instead\")",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"use NavigationStack or NavigationSplitView instead\")",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"use NavigationStack or NavigationSplitView instead\")",
                "@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: \"use NavigationStack or NavigationSplitView instead\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"use NavigationStack or NavigationSplitView instead\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct PageIndexViewStyle : SwiftUI.IndexViewStyle {",
            "availabilities": [
                "@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PageIndexViewStyle",
            "conformances": [
                "SwiftUI.IndexViewStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@propertyWrapper @frozen public struct AccessibilityFocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ToolbarLabelStyle : Swift.Sendable, Swift.Equatable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarLabelStyle",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderedProminentButtonStyle : SwiftUI.PrimitiveButtonStyle {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PointerStyle : Swift.Sendable {",
            "availabilities": [
                "@available(macOS 15.0, visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PointerStyle",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct GroupBoxStyleConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "GroupBoxStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct TabPlacement : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TabPlacement",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct WidgetBundleBuilder {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PresentationDetent : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationDetent",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PresentationAdaptation : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationAdaptation",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PresentationContentInteraction : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationContentInteraction",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PresentationBackgroundInteraction : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)"
            ]
        },
        "parsed_struct": {
            "name": "PresentationBackgroundInteraction",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BorderedTableStyle : SwiftUI.TableStyle {",
            "availabilities": [
                "@available(macOS 12.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ButtonRepeatBehavior : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ButtonRepeatBehavior",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ButtonGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct UIGestureRecognizerRepresentableContext<Representable> where Representable : SwiftUI.UIGestureRecognizerRepresentable {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UIGestureRecognizerRepresentableContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct UIGestureRecognizerRepresentableCoordinateSpaceConverter {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UIGestureRecognizerRepresentableCoordinateSpaceConverter",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _MenuButtonStyleConfiguration {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use `MenuStyle.Configuration` instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_MenuButtonStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct NavigationSplitViewColumn : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "NavigationSplitViewColumn",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PasteButton : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DocumentGroup<Document, Content> : SwiftUI.Scene where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct UIViewRepresentableContext<Representable> where Representable : SwiftUI.UIViewRepresentable {",
            "availabilities": [
                "@available(iOS 13.0, tvOS 13.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Representable",
                "constraint": "inherits_from",
                "value": "SwiftUI.UIViewRepresentable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct TupleTableRowContent<Value, T> : SwiftUI.TableRowContent where Value : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 12.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Identifiable"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TitleOnlyLabelStyle : SwiftUI.LabelStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct FocusInteractions : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "FocusInteractions",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _FocusableModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.4, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TimelineView<Schedule, Content> where Schedule : SwiftUICore.TimelineSchedule {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TimelineView",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Button<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AccessibilityChildBehavior : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityChildBehavior",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct PopUpButtonPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS, unavailable)",
                "@available(macOS, introduced: 10.15, deprecated: 100000.0, message: \"Use the `menu` style instead.\")",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "PopUpButtonPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ToolbarRole : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarRole",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ContainerValueWritingModifier<Value> {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DocumentLaunchView<Actions, DocumentView> : SwiftUICore.View where Actions : SwiftUICore.View, DocumentView : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(macCatalyst, unavailable)",
                "@available(visionOS, unavailable)",
                "@available(macCatalyst, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Actions",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "DocumentView",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DocumentLaunchGeometryProxy {",
            "availabilities": [
                "@available(iOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DocumentLaunchGeometryProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DefaultDocumentGroupLaunchActions : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct GridItem : Swift.Sendable {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "GridItem",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LazyHGrid<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct LazyVGrid<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct DismissWindowAction {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct SectionedFetchResults<SectionIdentifier, Result> : Swift.RandomAccessCollection where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "SectionIdentifier",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "CoreData.NSFetchRequestResult"
            }
        ]
    },
    {
        "result": {
            "struct": "@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct SectionedFetchRequest<SectionIdentifier, Result> where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {",
            "availabilities": [
                "@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "SectionIdentifier",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            },
            {
                "type": "Result",
                "constraint": "inherits_from",
                "value": "CoreData.NSFetchRequestResult"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _WKStoryboardContent : SwiftUICore.View {",
            "availabilities": [
                "@available(watchOS 6.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SearchSuggestionsPlacement : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SearchSuggestionsPlacement",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AutomaticFormStyle : SwiftUI.FormStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct LabeledContentStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "LabeledContentStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct ExpandedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "ExpandedWindowToolbarStyle",
            "conformances": [
                "SwiftUI.WindowToolbarStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct UIHostingControllerSizingOptions : Swift.OptionSet, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 16.0, tvOS 16.0, *)",
                "@available(macOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UIHostingControllerSizingOptions",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct WindowBackgroundShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "WindowBackgroundShapeStyle",
            "conformances": [
                "SwiftUICore.ShapeStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct MenuPickerStyle : SwiftUI.PickerStyle {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "MenuPickerStyle",
            "conformances": [
                "SwiftUI.PickerStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SpatialTapGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, visionOS 1.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct WindowDragGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(macOS 15.0, *)",
                "@available(iOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct RenameButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct RenameAction {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "RenameAction",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct StackNavigationViewStyle : SwiftUI.NavigationViewStyle {",
            "availabilities": [
                "@available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"replace stack-styled NavigationView with NavigationStack\")",
                "@available(macOS, unavailable)",
                "@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: \"replace stack-styled NavigationView with NavigationStack\")",
                "@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: \"replace stack-styled NavigationView with NavigationStack\")",
                "@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: \"replace stack-styled NavigationView with NavigationStack\")"
            ]
        },
        "parsed_struct": {
            "name": "StackNavigationViewStyle",
            "conformances": [
                "SwiftUI.NavigationViewStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Label<Title, Icon> : SwiftUICore.View where Title : SwiftUICore.View, Icon : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Title",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Icon",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DisclosureTableRow<Label, Content> : SwiftUI.TableRowContent where Label : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent, Label.TableRowValue == Content.TableRowValue {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUI.TableRowContent"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUI.TableRowContent"
            },
            {
                "type": "Label.TableRowValue",
                "constraint": "equals",
                "value": "Content.TableRowValue"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct BadgeProminence : Swift.Hashable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 17.0, macOS 14.0, *)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "BadgeProminence",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct AccessibilityZoomGestureAction {",
            "availabilities": [
                "@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityZoomGestureAction",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SwitchToggleStyle : SwiftUI.ToggleStyle {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 18.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AdaptableTabBarPlacement : Swift.Hashable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AdaptableTabBarPlacement",
            "conformances": [
                "Swift.Hashable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ColorPicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Label",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FocusedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ObjectType",
                "constraint": "inherits_from",
                "value": "Combine.ObservableObject"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct ToolbarPlacement {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ToolbarPlacement",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct DocumentGroupLaunchScene<Actions> : SwiftUI.Scene where Actions : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Actions",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AccessibilityActionKind : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "AccessibilityActionKind",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct GroupSectionsOfContent<Sections, Content> : SwiftUICore.View where Sections : SwiftUICore.View, Content : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Sections",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SectionCollection : Swift.RandomAccessCollection {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SectionCollection",
            "conformances": [
                "Swift.RandomAccessCollection "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SectionConfiguration : Swift.Identifiable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "SectionConfiguration",
            "conformances": [
                "Swift.Identifiable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DisclosureIndicator : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SpatialEventGesture : SwiftUICore.Gesture {",
            "availabilities": [
                "@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ScrollableLayoutProxy : Swift.RandomAccessCollection {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ScrollableLayoutProxy",
            "conformances": [
                "Swift.RandomAccessCollection "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ScrollableLayoutItem : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ScrollableLayoutItem",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct LabelStyleConfiguration {",
            "availabilities": [
                "@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "LabelStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct UnifiedCompactWindowToolbarStyle : SwiftUI.WindowToolbarStyle {",
            "availabilities": [
                "@available(macOS 11.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "UnifiedCompactWindowToolbarStyle",
            "conformances": [
                "SwiftUI.WindowToolbarStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DraggingModifier : SwiftUICore.ViewModifier {",
            "availabilities": [
                "@available(iOS 13.4, macOS 10.15, *)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ScrollViewProxy : Swift.Equatable {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ScrollViewProxy",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ContainedScrollViewKey {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "_ContainedScrollViewKey",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularGaugeStyle : SwiftUI.GaugeStyle {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Window<Content> : SwiftUI.Scene where Content : SwiftUICore.View {",
            "availabilities": [
                "@available(macOS 13.0, *)",
                "@available(iOS, unavailable)",
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(visionOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct DatePickerStyleConfiguration {",
            "availabilities": [
                "@available(iOS 16.0, macOS 13.0, watchOS 10.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DatePickerStyleConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DatePickerStyleLabel : SwiftUICore.View {",
            "availabilities": [
                "@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ViewInputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ViewInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct EventModifiers : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ScrollGeometry : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "ScrollGeometry",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ScrollLayout : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ScrollLayout",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct ZStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ZStackLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct ZStackLayout : SwiftUICore.Layout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct LinearGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct RadialGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EllipticalGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct AngularGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ScrollPosition : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ScrollPosition",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ScrollTarget {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ScrollTarget",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _OffsetEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct OffsetTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _AnyAnimatableData : SwiftUICore.VectorArithmetic {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMonochromeEffect : SwiftUICore.EnvironmentalModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct SimultaneousGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "First",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            },
            {
                "type": "Second",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct VStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _VStackLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct VStackLayout : SwiftUICore.Layout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ViewDimensions {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ViewDimensions",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _FixedSizeLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EmptyHoverEffect : SwiftUICore.CustomHoverEffect {",
            "availabilities": [
                "@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "EmptyHoverEffect",
            "conformances": [
                "SwiftUICore.CustomHoverEffect "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _CustomHoverEffectInputs {",
            "availabilities": [
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_CustomHoverEffectInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _CustomHoverEffectOutputs {",
            "availabilities": [
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_CustomHoverEffectOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct ExclusiveGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "First",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            },
            {
                "type": "Second",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _RotationEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct AnyGradient : Swift.Hashable, SwiftUICore.ShapeStyle, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _AnyLinearGradient : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _AnyRadialGradient : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _AnyEllipticalGradient : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _AnyAngularGradient : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ViewModifier_Content<Modifier> : SwiftUICore.View where Modifier : SwiftUICore.ViewModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Modifier",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ViewModifier"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PlaceholderContentView<Value> : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct KeyframeTrack<Root, Value, Content> : SwiftUICore.Keyframes where Value == Content.Value, Content : SwiftUICore.KeyframeTrackContent {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "KeyframeTrack",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundColorModifier {",
            "availabilities": [
                "@available(*, deprecated, message: \"will be removed\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct Namespace : SwiftUICore.DynamicProperty, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct ImagePaint : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PeriodicTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "PeriodicTimelineSchedule",
            "conformances": [
                "SwiftUICore.TimelineSchedule",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct EveryMinuteTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "EveryMinuteTimelineSchedule",
            "conformances": [
                "SwiftUICore.TimelineSchedule",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct ExplicitTimelineSchedule<Entries> : SwiftUICore.TimelineSchedule where Entries : Swift.Sequence, Entries.Element == Foundation.Date {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ExplicitTimelineSchedule",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct Gradient : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _TextVariantPreference<Preference> : Swift.Sendable where Preference : SwiftUICore.TextVariantPreference {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_TextVariantPreference",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct FixedTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "FixedTextVariant",
            "conformances": [
                "SwiftUICore.TextVariantPreference",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct SizeDependentTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "SizeDependentTextVariant",
            "conformances": [
                "SwiftUICore.TextVariantPreference",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct KeyframeAnimator<Value, KeyframePath, Content> : SwiftUICore.View where Value == KeyframePath.Value, KeyframePath : SwiftUICore.Keyframes, Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "equals",
                "value": "KeyframePath.Value"
            },
            {
                "type": "KeyframePath",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Keyframes"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PaddingLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct TupleView<T> : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BlendModeEffect : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _Placement : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_Placement",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMatrixEffect {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Group<Content> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ContrastEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct UnitCurve {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "UnitCurve",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct MatchedGeometryProperties : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _MatchedGeometryEffect<ID> where ID : Swift.Hashable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ID",
                "constraint": "inherits_from",
                "value": "Swift.Hashable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentKeyWritingModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@preconcurrency @_Concurrency.MainActor public struct OpenURLAction {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct Spring : Swift.Hashable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "Spring",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayModifier<Overlay> : SwiftUICore.ViewModifier where Overlay : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Overlay",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayStyleModifier<Style> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Bounds",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct Font : Swift.Hashable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ProposedSize {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ProposedSize",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct Spacer {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TextBaselineRelativeSpacer {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _HSpacer {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _VSpacer {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct KeyframesBuilder<Value> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MoveTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _StackLayoutCache {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_StackLayoutCache",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BlurEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AccessibilityTextContentType : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "AccessibilityTextContentType",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorInvertEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TraitWritingModifier<Trait> where Trait : SwiftUICore._ViewTraitKey {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Trait",
                "constraint": "inherits_from",
                "value": "SwiftUICore._ViewTraitKey"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ConditionalTraitWritingModifier<Trait> where Trait : SwiftUICore._ViewTraitKey {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Trait",
                "constraint": "inherits_from",
                "value": "SwiftUICore._ViewTraitKey"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerViewModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerColorMatrixEffect {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ContentShapeKinds : Swift.OptionSet, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ContentShapeKinds",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GrayscaleEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Anchor<Value> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _Rotation3DEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EmptyHoverEffectContent : SwiftUICore.HoverEffectContent {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "EmptyHoverEffectContent",
            "conformances": [
                "SwiftUICore.HoverEffectContent "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _HoverEffectContentInputs {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_HoverEffectContentInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _HoverEffectContentOutputs {",
            "availabilities": [
                "@available(visionOS 2.0, *)",
                "@available(iOS, unavailable)",
                "@available(macOS, unavailable)",
                "@available(watchOS, unavailable)",
                "@available(tvOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "_HoverEffectContentOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _OpacityEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _OpacityShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct OpacityTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ShadowEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DrawingGroupEffect : SwiftUICore.ViewModifier, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BrightnessEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryGroupEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct AsymmetricTransition<Insertion, Removal> : SwiftUICore.Transition where Insertion : SwiftUICore.Transition, Removal : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Insertion",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Transition"
            },
            {
                "type": "Removal",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Transition"
            }
        ]
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct ViewBuilder {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct EnvironmentObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ObjectType",
                "constraint": "inherits_from",
                "value": "Combine.ObservableObject"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _MaskAlignmentEffect<Mask> : SwiftUICore.ViewModifier where Mask : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Mask",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _MaskEffect<Mask> : SwiftUICore.ViewModifier where Mask : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Mask",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AccessibilityTraits : Swift.SetAlgebra, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "AccessibilityTraits",
            "conformances": [
                "Swift.SetAlgebra",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct LocalizedStringKey : Swift.Equatable, Swift.ExpressibleByStringInterpolation {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EnabledTextSelectability : SwiftUICore.TextSelectability {",
            "availabilities": [
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "EnabledTextSelectability",
            "conformances": [
                "SwiftUICore.TextSelectability "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct DisabledTextSelectability : SwiftUICore.TextSelectability {",
            "availabilities": [
                "@available(tvOS, unavailable)",
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "DisabledTextSelectability",
            "conformances": [
                "SwiftUICore.TextSelectability "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct HStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _HStackLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct HStackLayout : SwiftUICore.Layout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _CompositingGroupEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ResolvedKeyframes<Value> {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ResolvedKeyframes",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct AnyShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceReadingView<Key, Content> : SwiftUICore.View where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AccessibilityCustomContentKey {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "AccessibilityCustomContentKey",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _TrimmedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _EndedGesture<Content> where Content : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ChangedGesture<Content> where Content : SwiftUICore.Gesture, Content.Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            },
            {
                "type": "Content.Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _DynamicPropertyBuffer {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_DynamicPropertyBuffer",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _Graph {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_Graph",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _GraphValue<Value> : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_GraphValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct Transaction {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct RedactionReasons : Swift.OptionSet, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "RedactionReasons",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct FillStyle : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _BlendModeShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct Material : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "Material",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct MaterialActiveAppearance : Swift.Sendable, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "MaterialActiveAppearance",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _VariadicView_Children {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_VariadicView_Children",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct HierarchicalShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct HierarchicalShapeStyleModifier<Base> : SwiftUICore.ShapeStyle where Base : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Base",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct SymbolRenderingMode : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "SymbolRenderingMode",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@dynamicMemberLookup public struct ShaderLibrary : Swift.Equatable, @unchecked Swift.Sendable {",
            "availabilities": [
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@dynamicCallable public struct ShaderFunction : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct Shader : Swift.Equatable, Swift.Sendable {",
            "availabilities": [
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": {
            "name": "Shader",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _ShaderFilterEffect : Swift.Sendable {",
            "availabilities": [
                "@available(watchOS, unavailable)"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct GraphicsContext {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AspectRatioLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SeparatorShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "SeparatorShapeStyle",
            "conformances": [
                "SwiftUICore.ShapeStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct GeometryReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct GeometryProxy {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "GeometryProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@propertyWrapper @preconcurrency @_Concurrency.MainActor @frozen public struct ObservedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ObjectType",
                "constraint": "inherits_from",
                "value": "Combine.ObservableObject"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayPreferenceModifier<Key, Overlay> where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            },
            {
                "type": "Overlay",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundPreferenceModifier<Key, Overlay> where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            },
            {
                "type": "Overlay",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct AnyLayout : SwiftUICore.Layout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct LayoutProperties : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "LayoutProperties",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct ProposedViewSize : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ViewSpacing : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ViewSpacing",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct LayoutSubviews : Swift.Equatable, Swift.RandomAccessCollection, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "LayoutSubviews",
            "conformances": [
                "Swift.Equatable",
                "Swift.RandomAccessCollection",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct LayoutSubview : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "LayoutSubview",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _LayoutTrait<K> : SwiftUICore._ViewTraitKey where K : SwiftUICore.LayoutValueKey {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_LayoutTrait",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _LayoutRoot<L> : SwiftUICore._VariadicView.UnaryViewRoot where L : SwiftUICore.Layout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "L",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Layout"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _IdentifiedViewProxy {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_IdentifiedViewProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct SlideTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ShadowStyle : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ShadowStyle",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _ShadowShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _AnchoredShapeStyle<S> : SwiftUICore.ShapeStyle where S : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct StrokeStyle : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TypesettingLanguage : Swift.Sendable, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "TypesettingLanguage",
            "conformances": [
                "Swift.Sendable",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct BackgroundProminence : Swift.Hashable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "BackgroundProminence",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _ViewListInputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ViewListInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _ViewListCountInputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ViewListCountInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _ViewListOutputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ViewListOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct BackgroundStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentBackgroundStyleModifier<S> where S : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier<Style> where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier2<S1, S2> where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S1",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "S2",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier3<S1, S2, S3> where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S1",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "S2",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "S3",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct ForegroundStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _ImplicitShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _ShapeStyle_Shape {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ShapeStyle_Shape",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _ShapeStyle_ShapeType {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ShapeStyle_ShapeType",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _StrokedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct UnitPoint : Swift.Hashable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceTransformModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _ViewOutputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ViewOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceWritingModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _LuminanceToAlphaEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct AnyShape : SwiftUICore.Shape, @unchecked Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _MapGesture<Content, Value> where Content : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Gesture"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct AnyGesture<Value> : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Path : Swift.Equatable, Swift.LosslessStringConvertible, @unchecked Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Rectangle : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct RoundedRectangle : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct UnevenRoundedRectangle : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Capsule : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Ellipse : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Circle : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AlignmentLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct ProjectionTransform {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct EdgeInsets : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AppearanceActionModifier : SwiftUICore.ViewModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _PreferenceValue<Key> where Key : SwiftUICore.PreferenceKey {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_PreferenceValue",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _DelayedPreferenceView<Key, Content> : SwiftUICore.View where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Key",
                "constraint": "inherits_from",
                "value": "SwiftUICore.PreferenceKey"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentKeyTransformModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _DetachableProperties : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_DetachableProperties",
            "conformances": [
                "Swift.OptionSet "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _DetachedView<Detached, Content, Child> : SwiftUICore.View where Detached : SwiftUICore._Detachable, Content : SwiftUICore.View, Child : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Detached",
                "constraint": "inherits_from",
                "value": "SwiftUICore._Detachable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            },
            {
                "type": "Child",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _DetachedKey<Key> : SwiftUICore._Detachable where Key : SwiftUICore.PreferenceKey {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_DetachedKey",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _EmptyDetached : SwiftUICore._Detachable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_EmptyDetached",
            "conformances": [
                "SwiftUICore._Detachable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct _DetachedPlaceholder<Detached> : SwiftUICore.View where Detached : SwiftUICore._Detachable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Detached",
                "constraint": "inherits_from",
                "value": "SwiftUICore._Detachable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct HorizontalAlignment : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct VerticalAlignment : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Alignment : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_documentation(visibility: private) @frozen public struct AlignmentKey : Swift.Hashable, Swift.Comparable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct Environment<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PushTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper @dynamicMemberLookup public struct Binding<Value> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _Velocity<Value> : Swift.Equatable where Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct EnvironmentValues : Swift.CustomStringConvertible {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "EnvironmentValues",
            "conformances": [
                "Swift.CustomStringConvertible "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollClipEffect<ClipShape> : SwiftUICore.ViewModifier, SwiftUICore.Animatable where ClipShape : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ClipShape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _EnabledScrollClipEffect<ClipShape> : SwiftUICore.ViewModifier, SwiftUICore.Animatable where ClipShape : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ClipShape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeUnion<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeSymmetricDifference<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeLineIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct _ShapeLineSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "T",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "U",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@propertyWrapper public struct ScaledMetric<Value> : SwiftUICore.DynamicProperty where Value : Swift.BinaryFloatingPoint {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.BinaryFloatingPoint"
            }
        ]
    },
    {
        "result": {
            "struct": "@propertyWrapper public struct _ScaledValue : SwiftUICore.DynamicProperty {",
            "availabilities": [
                "@available(*, deprecated, message: \"Use @ScaledMetric\")"
            ]
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@dynamicMemberLookup @propertyWrapper public struct Bindable<Value> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _FrameLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _FlexFrameLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TextProxy {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "TextProxy",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TextRendererViewModifier<Renderer> where Renderer : SwiftUICore.TextRenderer {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Renderer",
                "constraint": "inherits_from",
                "value": "SwiftUICore.TextRenderer"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AnimationModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _AnimationView<Content> : SwiftUICore.View where Content : Swift.Equatable, Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _GraphInputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_GraphInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct Color : Swift.Hashable, Swift.CustomStringConvertible, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BindingActionModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ValueActionModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct AnimationState<Value> where Value : SwiftUICore.VectorArithmetic {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "AnimationState",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _UnaryViewAdaptor<Content> : SwiftUICore.View where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct AnimatablePair<First, Second> : SwiftUICore.VectorArithmetic where First : SwiftUICore.VectorArithmetic, Second : SwiftUICore.VectorArithmetic {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "First",
                "constraint": "inherits_from",
                "value": "SwiftUICore.VectorArithmetic"
            },
            {
                "type": "Second",
                "constraint": "inherits_from",
                "value": "SwiftUICore.VectorArithmetic"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _GestureInputs {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_GestureInputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _GestureOutputs<Value> {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_GestureOutputs",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _LayoutTraits : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_LayoutTraits",
            "conformances": [
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyView : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TimeDataSource<Value> {",
            "availabilities": [
                "@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)"
            ]
        },
        "parsed_struct": {
            "name": "TimeDataSource",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct ContainerRelativeShape : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ContainerShapeModifier<Shape> where Shape : SwiftUICore.InsettableShape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Shape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.InsettableShape"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _ResolvedKeyframeTrackContent<Value> where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_ResolvedKeyframeTrackContent",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct CubicKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "CubicKeyframe",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct SpringKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "SpringKeyframe",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct LinearKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "LinearKeyframe",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct MoveKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "MoveKeyframe",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct PhaseAnimator<Phase, Content> : SwiftUICore.View where Phase : Swift.Equatable, Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Phase",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            },
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "public struct _RendererConfiguration {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_RendererConfiguration",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct KeyframeTimeline<Value> {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "KeyframeTimeline",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct TapGesture : SwiftUICore.Gesture {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_functionBuilder public struct KeyframeTrackContentBuilder<Value> where Value : SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Animatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct StateObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ObjectType",
                "constraint": "inherits_from",
                "value": "Combine.ObservableObject"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct AnyView : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct _EventDebugTriggers : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_EventDebugTriggers",
            "conformances": [
                "Swift.OptionSet "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct ColorMatrix : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _ColorMatrix : Swift.Equatable, Swift.Codable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackdropEffect<Backdrop> where Backdrop : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Backdrop",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackdropEffectPlaceholder {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct EmptyAnimatableData : SwiftUICore.VectorArithmetic {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct MeshGradient : SwiftUICore.ShapeStyle, Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PinnedScrollableViews : Swift.OptionSet, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "PinnedScrollableViews",
            "conformances": [
                "Swift.OptionSet",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct _SizedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "S",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyModifier : SwiftUICore.ViewModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct ModifiedContent<Content, Modifier> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct SymbolVariants : Swift.Hashable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "SymbolVariants",
            "conformances": [
                "Swift.Hashable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundModifier<Background> : SwiftUICore.ViewModifier where Background : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Background",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundStyleModifier<Style> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Bounds",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _InsettableBackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.InsettableShape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Bounds",
                "constraint": "inherits_from",
                "value": "SwiftUICore.InsettableShape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @propertyWrapper public struct State<Value> : SwiftUICore.DynamicProperty {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct AnimationContext<Value> where Value : SwiftUICore.VectorArithmetic {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "AnimationContext",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct _TestApp {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_TestApp",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct AnyTransition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ContentTransition : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ContentTransition",
            "conformances": [
                "Swift.Equatable",
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct _Transition_ContentTransition {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "_Transition_ContentTransition",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "public struct TransitionProperties : Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "TransitionProperties",
            "conformances": [
                "Swift.Sendable "
            ]
        }
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct IdentityTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct EmptyVisualEffect : SwiftUICore.VisualEffect {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "EmptyVisualEffect",
            "conformances": [
                "SwiftUICore.VisualEffect "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct NamedCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "NamedCoordinateSpace",
            "conformances": [
                "SwiftUICore.CoordinateSpaceProtocol",
                "Swift.Equatable "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct LocalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "LocalCoordinateSpace",
            "conformances": [
                "SwiftUICore.CoordinateSpaceProtocol "
            ]
        }
    },
    {
        "result": {
            "struct": "public struct GlobalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "GlobalCoordinateSpace",
            "conformances": [
                "SwiftUICore.CoordinateSpaceProtocol "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _SaturationEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Angle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _SafeAreaIgnoringLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _SafeAreaRegionsIgnoringLayout {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _ConditionalContent<TrueContent, FalseContent> {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct ForEach<Data, ID, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "ForEach",
            "conformances": []
        }
    },
    {
        "result": {
            "struct": "@frozen public struct OffsetShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct ScaledShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct RotatedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct TransformedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMultiplyEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct Canvas<Symbols> where Symbols : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Symbols",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ClipEffect<ClipShape> where ClipShape : SwiftUICore.Shape {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "ClipShape",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _TransactionModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ValueTransactionModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier where Value : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Value",
                "constraint": "inherits_from",
                "value": "Swift.Equatable"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _PushPopTransactionModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.ViewModifier {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ViewModifier"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeView<Content, Style> : SwiftUICore.View where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct FillShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Background",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct StrokeShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.Shape"
            },
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Background",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct StrokeBorderShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.InsettableShape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.InsettableShape"
            },
            {
                "type": "Style",
                "constraint": "inherits_from",
                "value": "SwiftUICore.ShapeStyle"
            },
            {
                "type": "Background",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct BlurReplaceTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Text : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct SafeAreaRegions : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct PreferredColorSchemeKey : SwiftUICore.PreferenceKey {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "PreferredColorSchemeKey",
            "conformances": [
                "SwiftUICore.PreferenceKey "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen public struct Image : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct GestureMask : Swift.OptionSet {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct _ScaleEffect : SwiftUICore.GeometryEffect, Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@_Concurrency.MainActor @preconcurrency public struct ScaleTransition : SwiftUICore.Transition {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _InsetViewModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.View {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": [
            {
                "type": "Content",
                "constraint": "inherits_from",
                "value": "SwiftUICore.View"
            }
        ]
    },
    {
        "result": {
            "struct": "@frozen public struct RectangleCornerRadii : Swift.Equatable, SwiftUICore.Animatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "@frozen public struct Animation : Swift.Equatable, Swift.Sendable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    },
    {
        "result": {
            "struct": "public struct TintShapeStyle : SwiftUICore.ShapeStyle {",
            "availabilities": []
        },
        "parsed_struct": {
            "name": "TintShapeStyle",
            "conformances": [
                "SwiftUICore.ShapeStyle "
            ]
        }
    },
    {
        "result": {
            "struct": "@frozen @_Concurrency.MainActor @preconcurrency public struct _HueRotationEffect : Swift.Equatable {",
            "availabilities": []
        },
        "parsed_struct": null,
        "parsed_conditions": []
    }
]